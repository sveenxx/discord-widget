{"mappings":"eEEsB,wCAAS,CAAC,EAAsB,EAAkB,CAAC;QACjE,CAAC;QACD,KAAK,CAAC,IAAG,IAAI,+BAA+B,EAAE,EAAE,CAAC,YAAY;QAC7D,KAAK,CAAC,IAAI,gBAAuB,KAAK,CAAC,IAAG,GAAG,IAAI;eAC1C,IAAI;IACf,CAAC,QAAQ,GAAG,EAAE,CAAC;QACX,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG;IACvB,CAAC;AACL,CAAC;;;SCVe,yCAAQ,CAAC,EAAe,EAAE,MAAc,EAAE,CAAC;IACvD,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,GAAK,CAAC;QACnC,EAAE,CAAC,KAAK,CACJ,IAAI,CACC,KAAK,cACL,IAAI,EAAC,CAAG,GACR,WAAW,MAChB,MAAM,CAAC,IAAI;IACnB,CAAC;AACL,CAAC;;;;;;MCLY,yCAAM;gBAiBX,OAAoB,EACpB,KAAY,EACZ,OAAmC,CACrC,CAAC;aACM,OAAO,GAAG,OAAO;aACjB,OAAO,GAAG,OAAO;aACjB,KAAK,GAAG,KAAK;QAElB,EAEG,AAFH,4DAEG,AAFH,EAEG,CACH,KAAK,CAAC,cAAc,GAAG,QAAQ,CAAC,aAAa,EAAC,GAAK;QAEnD,EAEG,AAFH,+CAEG,AAFH,EAEG,CACH,cAAc,CAAC,YAAY,EAAC,mBAAqB,IAAE,IAAM;QAEzD,0DAAQ,CAAC,cAAc;YACnB,KAAK,GAAE,KAAO;YACd,eAAe,GAAE,IAAM;YACvB,KAAK,GAAE,KAAO;YACd,MAAM,GAAE,KAAO;YACf,YAAY,GAAE,IAAM;;aAGnB,OAAO,CAAC,WAAW,CAAC,cAAc;QACvC,OAAO,CAAC,GAAG,EAAC,GAAK;IACrB,CAAC;;;;;;;;AJ5CL,KAAK,CAAC,oCAAc,IAAG,KAAO;MAET,wCAAa,SAAS,yCAAM;IAG7C,EAOG,AAPH,+OAOG,AAPH,EAOG,cACU,IAAI,CACb,OAA2B,EAC3B,OAAe,EACf,OAAuB,EACR,CAAC;QAChB,KAAK,CAAC,KAAK,SAAS,yDAAS,CAAC,OAAO;QAErC,EAAE,GAAG,OAAO,IAAI,OAAO,CAAC,QAAQ,KAAK,CAAC,EAClC,KAAK,CAAC,GAAG,CAAC,SAAS,EACd,2CAA2C,EAAE,OAAO;QAI7D,EAAE,GAAG,KAAK,EACN,KAAK,CAAC,GAAG,CAAC,SAAS,EACd,sCAAsC,EAAE,KAAK;eAI/C,GAAG,CAAC,0DAAM,CAAC,OAAO,EAAE,KAAK,EAAE,OAAO;IAC7C,CAAC;;AA/BgB,wCAAa,CACvB,OAAO,GAAW,oCAAc;WAiC9B,CAAC;IACV,KAAK,CAAC,IAAI,GAAG,QAAQ,CAAC,cAAc,EAAC,OAAS;IAC9C,KAAK,CAAC,MAAM,SAAS,wCAAa,CAAC,IAAI,CAAC,IAAI,GAAE,kBAAoB;IAElE,OAAO,CAAC,GAAG,CAAC,MAAM;AACtB,CAAC","sources":["src/index.ts","src/utils/index.ts","src/utils/fetchData.ts","src/utils/setStyle.ts","src/widget.ts"],"sourcesContent":["import { WidgetOptions } from \"./interfaces/\";\r\nimport { fetchData } from \"./utils\";\r\n\r\nimport { Widget } from \"./widget\";\r\n\r\nconst WIDGET_VERSION = \"1.0.0\";\r\n\r\nexport default class DiscordWidget extends Widget {\r\n    static version: string = WIDGET_VERSION;\r\n\r\n    /**\r\n     * Initializes the widget on the specified element\r\n     *\r\n     * @param element The DOM element to initialize\r\n     * @param guildId Guild identifier\r\n     * @param options [optional] Options for the widget\r\n     * @returns\r\n     */\r\n    static async init(\r\n        element: HTMLElement | null,\r\n        guildId: string,\r\n        options?: WidgetOptions\r\n    ): Promise<Widget> {\r\n        const guild = await fetchData(guildId);\r\n\r\n        if (!element || element.nodeType !== 1) {\r\n            throw new TypeError(\r\n                `exptect element to be DOM Element, but got ${element}`\r\n            );\r\n        }\r\n\r\n        if (!guild) {\r\n            throw new TypeError(\r\n                `exptect element to be Object, but got ${guild}`\r\n            );\r\n        }\r\n\r\n        return new Widget(element, guild, options);\r\n    }\r\n}\r\n\r\n(async () => {\r\n    const test = document.getElementById(\"discord\");\r\n    const widget = await DiscordWidget.init(test, \"600381707073486871\");\r\n\r\n    console.log(widget);\r\n})();\r\n","export * from \"./fetchData\";\r\nexport * from \"./setStyle\";\r\n","import { Guild } from \"../interfaces/\";\r\n\r\nexport async function fetchData(id: string | undefined): Promise<Guild> {\r\n    try {\r\n        const URL = `https://discord.com/api/guilds/${id}/widget.json`;\r\n        const data: Guild = await (await fetch(URL)).json();\r\n        return data;\r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n}\r\n","export function setStyle(el: HTMLElement, styles: Object) {\r\n    Object.keys(styles).forEach((prop) => {\r\n        el.style[\r\n            prop\r\n                .split(/(?=[A-Z])/)\r\n                .join(\"-\")\r\n                .toLowerCase()\r\n        ] = styles[prop];\r\n    });\r\n}\r\n","import * as I from \"./interfaces/\";\r\nimport { setStyle } from \"./utils\";\r\nimport { WidgetOptions, Guild } from \"./interfaces/\";\r\n\r\nexport class Widget implements I.Widget {\r\n    /**\r\n     * Options for current Widget instance\r\n     */\r\n    readonly options: WidgetOptions | undefined;\r\n\r\n    /**\r\n     *  The element that this widget is attached\r\n     */\r\n    readonly element: HTMLElement;\r\n\r\n    /**\r\n     * Fetched data from discord API\r\n     */\r\n    readonly guild: Guild;\r\n\r\n    constructor(\r\n        element: HTMLElement,\r\n        guild: Guild,\r\n        options?: WidgetOptions | undefined\r\n    ) {\r\n        this.element = element;\r\n        this.options = options;\r\n        this.guild = guild;\r\n\r\n        /**\r\n         * Create html element for this widget\r\n         */\r\n        const contentElement = document.createElement(\"div\");\r\n\r\n        /**\r\n         * Mark as discord widget\r\n         */\r\n        contentElement.setAttribute(\"data-discord-widget\", \"true\");\r\n\r\n        setStyle(contentElement, {\r\n            color: \"white\",\r\n            backgroundColor: \"gray\",\r\n            width: \"400px\",\r\n            height: \"500px\",\r\n            borderRadius: \"15px\",\r\n        });\r\n\r\n        this.element.appendChild(contentElement);\r\n        console.log(\"123\");\r\n    }\r\n}\r\n"],"names":[],"version":3,"file":"index.js.map"}