{"mappings":"MAIaA,cAiBLC,EACAC,EACAC,QAEKF,QAAUA,OACVE,QAAUA,OACVD,MAAQA,EAYb,MAAAE,EAAAC,SAAAC,cAAA,WCvCiBC,EAAiBC,ED0C9BJ,EAAcK,aAAA,sBAAA,QC1CDF,ED2CEH,EC3CeI,ED2Cf,CACfE,MAAA,qCAGC,QACLC,OAAW,6BC/CfC,OAAOC,KAAKL,GAAQM,SAASC,IACzBR,EAAGS,MACCD,EACKE,MAAK,aACLC,KAAI,KACJC,eACLX,EAAOO,4DCAEK,UAAsBpB,EAmC3CqB,kBAAApB,EAAAqB,EAAAnB,GACA,MAAAD,uBCzCgCqB,aAElBC,EAAG,kCAAqCD,mCACbE,MAAMD,IAAME,aAExCC,aACKC,MAAMD,IDmCxBE,CAA2EP,GAE3E,IAAArB,GAA2B,IAA3BA,EAA2B6B,SAAA,MAAA,IAAAC,UAAA,8CAAA9B,KAC3B,IAAQC,EAAA,MAAA,IAAA6B,UAAA,yCAAA7B,KAvCa,OAAA,IAAAF,EACQC,EAAAC,EAAAC,cAHT","sources":["src/widget.ts","src/utils/setStyle.ts","src/index.ts","src/utils/fetchData.ts"],"sourcesContent":["import * as I from \"./interfaces/\";\r\nimport { setStyle } from \"./utils\";\r\nimport { WidgetOptions, Guild } from \"./interfaces/\";\r\n\r\nexport class Widget implements I.Widget {\r\n    /**\r\n     * Options for current Widget instance\r\n     */\r\n    readonly options: WidgetOptions | undefined;\r\n\r\n    /**\r\n     *  The element that this widget is attached\r\n     */\r\n    readonly element: HTMLElement;\r\n\r\n    /**\r\n     * Fetched data from discord API\r\n     */\r\n    readonly guild: Guild;\r\n\r\n    constructor(\r\n        element: HTMLElement,\r\n        guild: Guild,\r\n        options?: WidgetOptions | undefined\r\n    ) {\r\n        this.element = element;\r\n        this.options = options;\r\n        this.guild = guild;\r\n\r\n        /**\r\n         * Create html element for this widget\r\n         */\r\n        const contentElement = document.createElement(\"div\");\r\n\r\n        /**\r\n         * Mark as discord widget\r\n         */\r\n        contentElement.setAttribute(\"data-discord-widget\", \"true\");\r\n\r\n        setStyle(contentElement, {\r\n            color: \"white\",\r\n            backgroundColor: \"gray\",\r\n            width: \"400px\",\r\n            height: \"500px\",\r\n            borderRadius: \"15px\",\r\n        });\r\n\r\n        this.element.appendChild(contentElement);\r\n        console.log(\"123\");\r\n    }\r\n}\r\n","export function setStyle(el: HTMLElement, styles: Object) {\r\n    Object.keys(styles).forEach((prop) => {\r\n        el.style[\r\n            prop\r\n                .split(/(?=[A-Z])/)\r\n                .join(\"-\")\r\n                .toLowerCase()\r\n        ] = styles[prop];\r\n    });\r\n}\r\n","import { WidgetOptions } from \"./interfaces/\";\r\nimport { fetchData } from \"./utils\";\r\n\r\nimport { Widget } from \"./widget\";\r\n\r\nconst WIDGET_VERSION = \"1.0.0\";\r\n\r\nexport default class DiscordWidget extends Widget {\r\n    static version: string = WIDGET_VERSION;\r\n\r\n    /**\r\n     * Initializes the widget on the specified element\r\n     *\r\n     * @param element The DOM element to initialize\r\n     * @param guildId Guild identifier\r\n     * @param options [optional] Options for the widget\r\n     * @returns\r\n     */\r\n    static async init(\r\n        element: HTMLElement | null,\r\n        guildId: string,\r\n        options?: WidgetOptions\r\n    ): Promise<Widget> {\r\n        const guild = await fetchData(guildId);\r\n\r\n        if (!element || element.nodeType !== 1) {\r\n            throw new TypeError(\r\n                `exptect element to be DOM Element, but got ${element}`\r\n            );\r\n        }\r\n\r\n        if (!guild) {\r\n            throw new TypeError(\r\n                `exptect element to be Object, but got ${guild}`\r\n            );\r\n        }\r\n\r\n        return new Widget(element, guild, options);\r\n    }\r\n}\r\n\r\n// (async () => {\r\n//     const test = document.getElementById(\"discord\");\r\n//     const widget = await DiscordWidget.init(test, \"600381707073486871\");\r\n\r\n//     console.log(widget);\r\n// })();\r\n","import { Guild } from \"../interfaces/\";\r\n\r\nexport async function fetchData(id: string | undefined): Promise<Guild> {\r\n    try {\r\n        const URL = `https://discord.com/api/guilds/${id}/widget.json`;\r\n        const data: Guild = await (await fetch(URL)).json();\r\n        return data;\r\n    } catch (err) {\r\n        throw new Error(err);\r\n    }\r\n}\r\n"],"names":["$95678db84350d22e707b26ac5f8db819$export$6da0c54d420de4fd","element","guild","options","contentElement","document","createElement","el","styles","setAttribute","color","height","Object","keys","forEach","prop","style","split","join","toLowerCase","$d52976ddd03324c7b65227f3ed01588c$export$9099ad97b570f7c","init","guildId","id","URL1","fetch","json","err","Error","$52a4475822b05afffed2b6d3c41ea92d$export$336ad58b686ca37","nodeType","TypeError"],"version":3,"file":"index.js.map","sourceRoot":"../"}